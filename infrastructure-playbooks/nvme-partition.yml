- name: Create partitions for Bucket Index and FS Journals on a single NVMe device. Prepares for use of osd_scenario=lvm. 
  hosts:
  - osds

  tasks:

  - name: Include vars of partition_vars.yaml
    include_vars:
      file: partition_vars.yaml

  # need to check if lvm2 is installed
  - name: install lvm2
    package:
      name: lvm2
      state: present

  # Start Partitioning
  - name: make Bucket Index partition
    parted:
      device: "{{nvmedev}}"
      number: 1
      label: gpt
      state: present
      align: optimal
      part_start: 1MB
      part_end: "{{ (nvme_bucket_index_size | int) + 1 }}MB"
      unit: MB

  - name: make Ceph journal partitions
    parted:
      device: "{{nvmedev}}"
      number: "{{item}}"
      label: gpt
      state: present
      align: optimal
      part_type: logical
      part_start: "{{ (nvme_bucket_index_size | int) + 2 + ((nvme_fs_journal_size | int) * ((item | int) - 2 )) }}MB"
      part_end: "{{ (nvme_bucket_index_size | int) + 1 + ((nvme_fs_journal_size | int) * ((item | int) - 1 )) }}MB"
      unit: MB
    with_sequence: end={{num_nvme_journals}} start=2

  #- name: create Ceph journal partitions 2
  #script: "makePartitions.sh {{item}} {{num_fs_journals}} {{nvme_bucket_index_size}} {{nvme_fs_journal_size}}"
  #with_items:
  #- "{{nvmedev}}"

  - name: output nvme vg names
    shell: echo vg-cephbi-`basename {{item}}`
    with_items:
      - "{{nvmedev}}"
    register: nvme_vg_names_out

  - name: set nvme vg names
    set_fact:
      nvme_vg_name={{nvme_vg_names_out.results[0]['stdout']}}

  - name: output nvme lv names
    shell: echo lv-cephbi-`basename {{item}}`
    with_items:
      - "{{nvmedev}}"
    register: nvme_lv_names_out

  - name: set nvme lv names
    set_fact:
      nvme_lv_name={{nvme_lv_names_out.results[0]['stdout']}}

  # LVM cfg for Ceph data device
  - name: add nvme device as LVM PV
    lvg:
      force: yes
      pvs: "{{item}}1"
      pesize: 4
      state: present
      vg: "{{nvme_vg_name}}"
    with_items:
      - "{{nvmedev}}"

  - name: create Ceph data LVs
    lvol:
      lv: "{{nvme_lv_name}}"
      vg: "{{nvme_vg_name}}"
      size: 100%FREE
      pvs: "{{item}}1"
    with_items:
      - "{{nvmedev}}"

# Write ending configuration logfile
  - name: save LV configuration
    shell: lvs
    run_once: true
    register: lvs_out

  - name: save LSBLK output
    shell: lsblk
    run_once: true
    register: lsblk_out

  - name: write cmd output to logfile
    action: template src=templates/logfile.j2 dest=/tmp/logfile.txt
    delegate_to: localhost

  - name: Print closing message
    debug:
      msg: "Wrote LSBLK and LVS cmd output to /tmp/logfile.txt"
    delegate_to: localhost
